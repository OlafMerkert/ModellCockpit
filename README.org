* ModellCockpit
Kleine Python Module, um Modellfahrzeuge zu steuern und Fahrzeugdaten anzuzeigen.

* Steuerung des Fahrzeugs
** Modellierung des Fahrzeugs
Man benoetigt eine Klasse, die die Steuersignale umsetzt und an das
Fahrzeug schickt.  Momentan gibt es in ~joystick.commands~ Prototypen
fuer Autos, Pistenwalzen, Flugzeuge und Hubschrauber.  Zu den
Steuerdaten gehoeren zum einen analoge Daten wie Gas und Lenkung, zum
Anderen koennen auch Einzel-Befehle wie "Licht an/aus" bereitgestellt
werden.  Die Klasse sollte jeweils mitteilen, welche Sorte Fahrzeug
man steuert.

** Eingabe mit dem Joystick
Um Profile fuer einen neuen Joystick zu erstellen, braucht man zuerst
eine Basisklasse, die ~Joystick~ und ~Steuerung~ erweitert.  Hier kann
man z.B. noch eine Kalibrierungsroutine ~calibrate~ zur Verfuegung
stellen.  Die Basisklasse sollte dann erweitert werden, so dass die
~send~ Methode zum Uebermitteln der Steuerdaten und bei Bedarf die
~handle_button~ und ~handle_hat~ Methoden (diese werden beim Druecken
von Knoepfen aufgerufen) zur Verfuegung stehen.  Ueber diese
Spezialprofile sollte in der Klassenvariable ~profiles~ in der
Basisklasse Buch gefuehrt werden.

Ein Beispiel dazu findet sich in ~joystick.profiles~.  Dort wird
allerdings noch eine Zwischenstufe verwendet, damit ein ~Commander~
verschiedene Fahrzeugtypen simultan unterstuetzen kann.

** Joystickdaten senden
Um den Joystick zu benutzen, ruft man ~js =
<Basisklasse>.create(<CommanderObjekt>)~ auf und startet die
Uebermittlung von Steuersignalen mit ~js.send_loop().start()~.
Alternativ kann man den Joystick auch automatisch erkennen lassen.
Dazu muss man zunaechst das Profil registrieren, durch
~profiles.register_profile(<Joystick Name>, <Basisklasse>)~, und ruft
dann ~js = profiles.detect_joystick(<CommanderObjekt>)~ auf.


* Anzeige der Fahrzeugdaten
** Erstellen der Anzeige
